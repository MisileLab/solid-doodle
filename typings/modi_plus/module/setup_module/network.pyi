"""
This type stub file was generated by pyright.
"""

from modi_plus.module.module import SetupModule

"""Network module."""
def check_connection(func): # -> Callable[..., Any]:
    """Check connection decorator
    """
    ...

class Network(SetupModule):
    STATE_TRUE = ...
    STATE_FALSE = ...
    STATE_JOYSTICK_UP = ...
    STATE_JOYSTICK_DOWN = ...
    STATE_JOYSTICK_LEFT = ...
    STATE_JOYSTICK_RIGHT = ...
    STATE_JOYSTICK_UNPRESSED = ...
    STATE_TIMER_REACHED = ...
    STATE_TIMER_UNREACHED = ...
    STATE_IMU_FRONT = ...
    STATE_IMU_REAR = ...
    STATE_IMU_LEFT = ...
    STATE_IMU_RIGHT = ...
    STATE_IMU_ORIGIN = ...
    STATE_BUZZER_ON = ...
    STATE_BUZZER_OFF = ...
    STATE_CAMERA_PICTURE = ...
    PROPERTY_NETWORK_RECEIVE_DATA = ...
    PROPERTY_NETWORK_BUTTON = ...
    PROPERTY_NETWORK_SWITCH = ...
    PROPERTY_NETWORK_DIAL = ...
    PROPERTY_NETWORK_JOYSTICK = ...
    PROPERTY_NETWORK_SLIDER = ...
    PROPERTY_NETWORK_TIMER = ...
    PROPERTY_NETWORK_IMU = ...
    PROPERTY_NETWORK_IMU_DIRECTION = ...
    PROPERTY_NETWORK_SEND_DATA = ...
    PROPERTY_NETWORK_SEND_TEXT = ...
    PROPERTY_NETWORK_BUZZER = ...
    PROPERTY_NETWORK_CAMERA = ...
    PROPERTY_OFFSET_BUTTON_PRESSED = ...
    PROPERTY_OFFSET_BUTTON_CLICKED = ...
    PROPERTY_OFFSET_BUTTON_DOUBLE_CLICKED = ...
    PROPERTY_OFFSET_IMU_ROLL = ...
    PROPERTY_OFFSET_IMU_PITCH = ...
    PROPERTY_OFFSET_IMU_YAW = ...
    def __init__(self, id_, uuid, connection_task) -> None:
        ...
    
    @property
    def esp_version(self):
        ...
    
    @esp_version.setter
    def esp_version(self, version): # -> None:
        ...
    
    @check_connection
    def received_data(self, index: int = ...) -> int:
        """Returns received data from MODI Play

        :param index: Data's index
        :type index: int
        :return: Received data
        :rtype: int
        """
        ...
    
    @check_connection
    def button_pressed(self, index: int = ...) -> bool:
        """Returns whether MODI Play button is pressed

        :param index: Button's index
        :type index: int
        :return: True is pressed
        :rtype: bool
        """
        ...
    
    @check_connection
    def button_clicked(self, index: int = ...) -> bool:
        """Returns whether MODI Play button is clicked

        :param index: Button's index
        :type index: int
        :return: True is clicked
        :rtype: bool
        """
        ...
    
    @check_connection
    def button_double_clicked(self, index: int = ...) -> bool:
        """Returns whether MODI Play button is double clicked

        :param index: Button's index
        :type index: int
        :return: True is double clicked
        :rtype: bool
        """
        ...
    
    @check_connection
    def switch_toggled(self, index: int = ...) -> bool:
        """Returns whether MODI Play switch is toggled

        :param index: Switch's index
        :type index: int
        :return: `True` if toggled or `False`.
        :rtype: bool
        """
        ...
    
    @check_connection
    def dial_turn(self, index: int = ...) -> int:
        """Returns the current degree of MODI Play dial

        :param index: Dial's index
        :type index: int
        :return: Current degree
        :rtype: int
        """
        ...
    
    @check_connection
    def joystick_direction(self, index: int = ...) -> str:
        """Returns the direction of the MODI Play joystick

        :param index: Joystick's index
        :type index: int
        :return: 'up', 'down', 'left', 'right', 'unpressed'
        :rtype: str
        """
        ...
    
    @check_connection
    def slider_position(self, index: int = ...) -> int:
        """Returns the current percentage of MODI Play slider

        :param index: Slider's index
        :type index: int
        :return: Current percentage
        :rtype: int
        """
        ...
    
    @property
    @check_connection
    def time_up(self) -> bool:
        """Returns if the MODI Play timer ticks

        :return: True if timer is up
        :rtype: bool
        """
        ...
    
    @property
    @check_connection
    def imu_roll(self) -> int:
        """Returns the roll angle of the MODI Play imu

        :return: Roll angle.
        :rtype: int
        """
        ...
    
    @property
    @check_connection
    def imu_pitch(self) -> int:
        """Returns the pitch angle of the MODI Play imu

        :return: Pitch angle.
        :rtype: int
        """
        ...
    
    @property
    @check_connection
    def imu_yaw(self) -> int:
        """Returns the yaw angle of the MODI Play imu

        :return: Yaw angle.
        :rtype: int
        """
        ...
    
    @property
    @check_connection
    def imu_direction(self) -> str:
        """Returns the direction of the MODI Play imu

        :return: 'front', 'rear', 'left', 'right', 'origin'
        :rtype: str
        """
        ...
    
    @check_connection
    def send_data(self, index: int, data: int) -> None:
        """Send text to MODI Play

        :param index: Data's index
        :type index: int
        :param data: Data to send.
        :type data: int
        :return: None
        """
        ...
    
    @check_connection
    def send_text(self, text: str) -> None:
        """Send text to MODI Play

        :param text: Text to send.
        :type text: str
        :return: None
        """
        ...
    
    @check_connection
    def buzzer_on(self) -> None:
        """Turns on MODI Play buzzer

        :return: None
        """
        ...
    
    @check_connection
    def buzzer_off(self) -> None:
        """Turns off MODI Play buzzer

        :return: None
        """
        ...
    
    @check_connection
    def take_picture(self) -> None:
        """Takes a picture on MODI Play

        :return: None
        """
        ...
    


