"""
This type stub file was generated by pyright.
"""

"""Module module."""
BROADCAST_ID = ...
def get_module_type_from_uuid(uuid): # -> str:
    ...

def get_module_from_name(module_type: str): # -> Any:
    """ Find module type for module initialize

    :param module_type: Type of the module in string
    :type module_type: str
    :return: Module corresponding to the type
    :rtype: Module
    """
    ...

def ask_modi_plus_device(devices):
    ...

class Module:
    """
    :param int id_: The id of the module.
    :param int uuid: The uuid of the module.
    """
    class Property:
        def __init__(self) -> None:
            ...
        
    
    
    class GetValueInitTimeout(Exception):
        def __init__(self) -> None:
            ...
        
    
    
    RUN = ...
    WARNING = ...
    FORCED_PAUSE = ...
    ERROR_STOP = ...
    UPDATE_FIRMWARE = ...
    UPDATE_FIRMWARE_READY = ...
    REBOOT = ...
    PNP_ON = ...
    PNP_OFF = ...
    def __init__(self, id_, uuid, connection_task) -> None:
        ...
    
    def __gt__(self, other) -> bool:
        ...
    
    def __lt__(self, other) -> bool:
        ...
    
    def __str__(self) -> str:
        ...
    
    @property
    def app_version(self): # -> str:
        ...
    
    @app_version.setter
    def app_version(self, version_info): # -> None:
        ...
    
    @property
    def os_version(self): # -> str:
        ...
    
    @os_version.setter
    def os_version(self, version_info): # -> None:
        ...
    
    @property
    def id(self) -> int:
        ...
    
    @property
    def uuid(self) -> int:
        ...
    
    @property
    def is_up_to_date(self):
        ...
    
    def update_property(self, property_type: int, property_value: bytearray) -> None:
        """ Update property value and time

        :param property_type: Type of the updated property
        :type property_type: int
        :param property_value: Value to update the property
        :type property_value: bytearray
        """
        ...
    


class SetupModule(Module):
    ...


class InputModule(Module):
    ...


class OutputModule(Module):
    ...


class ModuleList(list):
    def __init__(self, src, module_type=...) -> None:
        ...
    
    def __len__(self): # -> int:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __getitem__(self, key):
        ...
    
    def get(self, module_id):
        ...
    
    def sublist(self): # -> list[Any] | Any:
        """ When accessing the module, the modules are sorted in an ascending order of
        1. the connected time from network module

        :return: Module
        """
        ...
    
    def find(self, module_id): # -> int:
        ...
    


